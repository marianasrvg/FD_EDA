/*
 * MeshReader.c
 *
 *  Created on: May 14, 2016
 *      Author: Razorback
 */

/*
 * MeshReader.c
 *
 *  Created on: May 9, 2016
 *      Author: MartinR
 *
 *  Primera revision
 *  Lunes Mayo 9
 *  Segund revisión- 10 de mayo
 *	Tercera revisión- 11 de mayo
 *	Cuarta revisión- 12 de mayo
 *	Quinta revision - 13 mayo (cabio a apuntadores y pase por referencia)
 *	Sexta revision- 14 de mayo (el read file no funciona)
 *	Septima revision - 15 de mayo (final realese)
 *	Octava revisión - 15 de mayo (agregar funciones de borrar)
 */
//#include <List.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


//Estructura para las cordenadas de los puntos
struct coordenadas {
	float x; //punto para el eje x
	float y; //punto para el eje y
	float z; //punto para el eje z
};

struct tri {
	int p1; //indice de la coordenada del primer punto
	int p2; //indice de la coordenada del segundo punto
	int p3; //indice de la coordenada del tercer punto.
};

typedef struct coordenadas COORD;
typedef struct tri Triangle;

struct malla {
	int nVert; //cantidad de vertices que hay en el mesh
	int nFaces; //cantidad de triangulos que hay en el mesh
	Triangle *arrayTri; //cambio a apuntadores directo
	COORD *arrayCord; //cambio a apuntadores directo
};

typedef struct malla* Mesh;

//agrega un nuevo set de coordenadas a la malla
void add_vect(Mesh m, float x, float y, float z){
    int i = m->nVert; //igualar el indice a la cantidad de puntos que hay
    m->arrayCord = (COORD*)realloc(m->arrayCord, (m->nVert + 1)*sizeof(COORD)); //aumentar el tamaño con realloc
    m->arrayCord[i].x = x; //nueva coordenada en x
    m->arrayCord[i].y = y; //nueva coordenada en y
    m->arrayCord[i].z = z; //nueva coordenada en z

    m->nVert++; //aumentar el tamaño de coordenadas en el arreglo
    return; //No regresa nada
}

//Agrega una nuevo triangulo basado en los puntos que ya existen en la malla
void add_triangle(Mesh m, int point1, int point2, int point3){
    int i = m->nFaces; //Igualar el indice a la cantidad de triangulos que existen en el arreglo
    m->arrayTri = (Triangle*)realloc(m->arrayTri, (m->nFaces + 1)*sizeof(Triangle)); //Aumentar el tamaño del arreglo para el nuevo triangulo
    m->arrayTri[i].p1 = point1; //primer punto del nuevo triangulo
    m->arrayTri[i].p2 = point2; //segundo punto del nuevo triangulo
    m->arrayTri[i].p3 = point3; //tercer punto del nuevo triangulo
    m->nFaces++; //Aumentar el numero de caras en la malla
    return; //No regresa nada
}

//Mueve un conjunto de coordenadas cierta valor dado, este valor puede ser tanto negativo como positivo
void move_Points(Mesh m, float move, int punto){

    m->arrayCord[punto].x += move; //Actualizar la posicion de x
    m->arrayCord[punto].y += move; //Actualizar la posicion de y
    m->arrayCord[punto].z += move; //Actualizar la posicion de z

    return; //No regresa nada
}

//Para imprimir COORDENADAS
void imprimir_COORD (Mesh m){
	printf("\nNúmero de puntos\n\t\tx\ty\tz\n");
	int i;
	for ( i = 0; i < m->nVert; i++){
		printf("PUNTO #%d\t%.4f\t%.4f\t%.4f\n", i, m->arrayCord[i].x, m->arrayCord[i].y, m->arrayCord[i].z);
	}
}

//Imprimir Triangulo
void imprimir_TRIANGULO (Mesh m){
	printf("\nTriángulos\n\n");
	int i;
	for( i = 0; i < m->nFaces; i++){
		printf("TRIÁNGULO #%d\t%d\t%d\t%d\n", i, m->arrayTri[i].p1, m->arrayTri[i].p2, m->arrayTri[i].p3);
	}
}

//Función para leer el archivo
void open_Mesh(char *filename, Mesh m_malla) {
	//Creación de la malla que utilizaremos en el programa
	FILE *archivoMesh = fopen(filename, "rt"); //creación del archivo y lectura
	if (archivoMesh == NULL) {
		printf("El archivo no se puede abrir\n");
		return;
	}
	//Reading header
	//printf("El archivo sí se pudo abrir\n");
	fscanf(archivoMesh, "ply\nformat ascii 1.0\n");
	//printf("(:\n");
	fscanf(archivoMesh, "element vertex");
	fscanf(archivoMesh, " %d\n", &m_malla->nVert);
	//fscanf(archivoMesh, "element vertex %d\n", &m_malla->nVert); //obtener el número de vertices
//	m_malla->nVert = v;
//	fscanf(archivoMesh, "element vertex 6\n");
	//printf(":O\n");
	fscanf(archivoMesh, "property float x\n");
	fscanf(archivoMesh, "property float y\n");
	fscanf(archivoMesh, "property float z\n");
	//printf(":D\n");
	//fscanf(archivoMesh, "element face %d\n", &m_malla->nFaces); //obtener número de triángulos
	fscanf(archivoMesh, "element face");
	fscanf(archivoMesh, " %d\n", &m_malla->nFaces);
	fscanf(archivoMesh, "property list uchar char vertex_indices\n");
	fscanf(archivoMesh, "end_header\n");

	//ciclo para obtener vértices
	int i;
	//printf("%d\n", m_malla->nVert);
	//printf("%d\n", m_malla->nFaces);
	m_malla->arrayCord = malloc(m_malla->nVert * sizeof(COORD)); //creamos el arreglo del tamaño obtenido
	//printf("OMG\n");
	for (i = 0; i < m_malla->nVert; i++) {
		fscanf(archivoMesh, "%f %f %f\n", &m_malla->arrayCord[i].x,
				&m_malla->arrayCord[i].y, &m_malla->arrayCord[i].z);
		//		m_malla.arrayCord++;
	}

	//imprimir a ver sí funciona
/*	for (i = 0; i < m_malla.nVert; i++) {
		printf("%f %f %f\n", m_malla.arrayCord[i].x, m_malla.arrayCord[i].y,
				m_malla.arrayCord[i].z);
	}
*/
	//ciclo para obtener triángulos
	m_malla->arrayTri = malloc(m_malla->nFaces * sizeof(Triangle));
	//printf("OMG\n");
	for (i = 0; i < m_malla->nFaces; i++) {
		//fscanf(archivoMesh, "3 %d %d %d\n", &m_malla->arrayTri[i]->p1,
		//		&m_malla->arrayTri[i]->p2, &m_malla->arrayTri[i]->p3);
		//	(m_malla.arrayTri)++;
		fscanf(archivoMesh, "3");
		fscanf(archivoMesh, " %d %d %d\n", &m_malla->arrayTri[i].p1, &m_malla->arrayTri[i].p2, &m_malla->arrayTri[i].p3);
	}
	//printf("IT WORKS");
	//imprimir a ver sí funciona
	/*for (i = 0; i < m_malla.nFaces; i++) {
		printf("%d %d %d\n", m_malla.arrayTri[i].p1, m_malla.arrayTri[i].p2,
				m_malla.arrayTri[i].p3);
	}*/

	//printf("Número de vertices = %d\n", m_malla.nVert);
	//printf("Número de triángulos = %d\n", m_malla.nFaces);
	fclose(archivoMesh);
	return;
}

void escalar (Mesh m, int escala){
	int i;
	for (i = 0; i < m->nVert; i++){
		m->arrayCord[i].x *= escala;
		m->arrayCord[i].y *= escala;
		m->arrayCord[i].z *= escala;
	}
}

void tri_vecinos (Mesh m){
	int i, x;
	printf("\n");
	for (i=0; i<m->nFaces; i++){
		printf("El tríangulo #%d esta relacionado con:\t", i);
		for (x = 0; x<m->nFaces; x++){
			if (x != i){
			if ((m->arrayTri[i].p1 == m->arrayTri[x].p2)||(m->arrayTri[i].p1 == m->arrayTri[x].p1) || (m->arrayTri[i].p1 == m->arrayTri[x].p3)){
				printf("%d\t",x);
			} else if ((m->arrayTri[i].p2 == m->arrayTri[x].p2)||(m->arrayTri[i].p2 == m->arrayTri[x].p1) || (m->arrayTri[i].p2 == m->arrayTri[x].p3)){
				printf("%d\t",x);
			} else if ((m->arrayTri[i].p3 == m->arrayTri[x].p2)||(m->arrayTri[i].p3 == m->arrayTri[x].p1) || (m->arrayTri[i].p3 == m->arrayTri[x].p3)){
				printf("%d\t",x);
			}
			}
		}
		printf("\n");
	}
}

void find_tri (Mesh m, int point1, int point2, int point3){
	int i;
	for ( i = 0; i < m->nFaces; i++){
		if ((m->arrayTri[i].p1 == point1) && (m->arrayTri[i].p2 == point2) && (m->arrayTri[i].p3 = point3)){
			printf("\nLos puntos indicados pertenecen al triángulo #%d\n", i);
			return;
		}
	}
	printf("\nLos puntos indicados no pertenecen a ningún triángulo\n");
}

void vertice_tri (Mesh m, int v){
	int i;
	printf("El vértice #%d con coordenadas x = %.4f y = %.4f z = %.4f\n", v, m->arrayCord[v].x, m->arrayCord[v].y, m->arrayCord[v].z);
	printf("Es intersectado con los siguientes triángulos:\n");
	for ( i = 0; i < m->nFaces; i++){
		if ((m->arrayTri[i].p1 == v)||(m->arrayTri[i].p2 == v)||(m->arrayTri[i].p3 == v)){
			printf("- %d\n", i);
		}
	}
}

void export_mesh(Mesh m){
	char *strFileName = {"exported.ply"};
	FILE *toExp = fopen(strFileName, "w");

	fprintf(toExp, "ply\nformat ascii 1.0\n");
	fprintf(toExp, "element vertex %d\n", m->nVert);
	fprintf(toExp, "property float x\nproperty float y\nproperty float z\n");
	fprintf(toExp, "element face %d\n", m->nFaces);
	fprintf(toExp, "property list uchar char vertex_indices\nend_header\n");

	int i;

	for(i = 0; i < m->nVert;i++){
		fprintf(toExp, "%f %f %f\n", m->arrayCord[i].x, m->arrayCord[i].y, m->arrayCord[i].z);
	}
	for(i = 0; i < m->nFaces; i++){
		fprintf(toExp, "3 %d %d %d\n", m->arrayTri[i].p1, m->arrayTri[i].p2, m->arrayTri[i].p3);
	}

	fclose(toExp);

	return;
}

void borrar_puntos (Mesh m, int p){
	int i;
	if (p < m->nVert){
		for (i = p; i < m->nVert; i++){
			m->arrayCord[i]->x = m->arrayCord[i+1]->x;
			m->arrayCord[i]->y = m->arrayCord[i+1]->y;
			m->arrayCord[i]->z = m->arrayCord[i+1]->z;
		}
	}
}


int main(){
	Mesh m_malla;
	char *lol = {"pyramid.ply"};
	open_Mesh(lol, m_malla);
	imprimir_COORD(m_malla);
	imprimir_TRIANGULO(m_malla);
/*	float f1, f2, f3;
	f1 = 2.5;
	f2 = 2.7;
	f3 = 3.4;
	int t1, t2, t3;
	t1 = 0;
	t2 = 2;
	t3 = 4;
	add_vect(m_malla, f1, f2, f3);

	imprimir_COORD(m_malla);

	add_triangle(m_malla, t1, t2, t3);

	imprimir_TRIANGULO(m_malla);
*/
	escalar(m_malla, 3);

	move_Points(m_malla, 3.4, 2);

	export_mesh(m_malla);

	return 0;
}

